/######## Delegados ejemplo 20 



//########################## DEPOSITO


namespace Olinuck.Dario.Aula17
{
    public class Deposito<T>
    {

        private int _capacidadMaxima;

        private List<T> _lista;

        public T atr;      

        public Deposito(int capacidad)
        {
            this.atr = default(T);
            this._capacidadMaxima = capacidad;
            this._lista = new List<T>();
        }

        public bool Agregar(T a)
        {

            if (this._lista.Count >= this._capacidadMaxima)
            {
                return false;
            }
            else
            {
                this._lista.Add(a);
                return true;
            }  

        }

        public static bool operator +(Deposito<T> d, T a)
        {
            return (d.Agregar(a))? true : false;
        }

        private int GetIndice(T a)
        {
            int indice = -1;
            int contador = 0;

            foreach (T b in this._lista)
            {
                if (a.Equals(b))
                {
                    indice = contador;
                    break;
                }
                contador++;
            }
            return indice;
        }

        public static bool operator -(Deposito<T> d, T a)
        {
            return (d.Remover(a)) ? true : false;                 
        
        }

        public bool Remover(T a)
        {
            int x = this.GetIndice(a);
            if (x != -1)
            {
                this._lista.RemoveAt(x);
                return true;
            }
            return false; 

        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("Listado de: "+ typeof(T).Name);


            sb.AppendLine("Capacidad maxima: "+this._capacidadMaxima);

            foreach(T a in this._lista)
            {
               sb.AppendLine(a.ToString());
            }
            return sb.ToString();
        }


        public override bool Equals(object obj)
        {
 	         return base.Equals(obj);
        }
     
    }
}


//########################DB 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Data;
using System.Data.SqlClient;

namespace Olinuck.Dario.Aula18
{
    public class DBconnect
    {
        private SqlConnection _connection;

        private SqlCommand _command;

        //public SqlConnection Conct
        //{
        //    set { this._conection = value;  }
        //    get { return _conection;  }
        //}



        public DBconnect()
        {
            this._connection = new SqlConnection(Properties.Settings.Default.Setting);
            this._command = new SqlCommand();
        }

        public bool TestConexion()
        {
            try
            {
                _connection.Open();
                _connection.Close();
                return true;
            }
            catch (Exception e)
            {
                return false;
            }                     
           
        }

        public string TraerInfo()
        {
            StringBuilder sb = new StringBuilder();


            try
            {
                this._command.Connection = this._connection;
                this._command.CommandType = CommandType.Text;
                this._command.CommandText = "SELECT * FROM Personas";
                this._connection.Open();

                SqlDataReader sr = this._command.ExecuteReader();

                while(sr.Read())
                {
                                        
                    sb.AppendLine(sr[0].ToString());
                    sb.AppendLine(sr[1].ToString());
                    sb.AppendLine(sr[2].ToString());
                    sb.AppendLine(sr[3].ToString());

                }
                sr.Close();
                this._connection.Close();            
                return sb.ToString();                              
            
            }
            catch (Exception e)
            {
                sb.AppendLine("Error: "+e.Message);
            }
          
            return sb.ToString();
                    
        }

        public bool AgregarPersona(Persona p)
        {
            try
            {
                this._command.Connection = this._connection;
                this._command.CommandType = CommandType.Text;
                this._command.CommandText = "INSERT into Personas (nombre, apellido,edad) VALUES ('"+ p._nombre + "','"+p._apellido+"',"+p._edad+")";
                this._connection.Open();
                this._command.ExecuteNonQuery();
                this._connection.Close();
                return true;


            }
            catch(Exception e)
            {
                Console.WriteLine(e.Message);
                return false;
            }

        
        }


        public bool ModificarPersona(Persona p)
        {
            try
            {
                this._command.Connection = this._connection;
                this._command.CommandType = CommandType.Text;
                this._command.CommandText = "UPDATE Personas set nombre = '"+p._nombre+"', apellido = '"+p._apellido+"', edad= '"+p._edad+"' WHERE id = 5";
                this._connection.Open();
                this._command.ExecuteNonQuery();
                this._connection.Close();

                return true;


            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return false;
            }


        }


        public bool EliminarPersona(Persona p)
        {
            try
            {
                this._command.Connection = this._connection;
                this._command.CommandType = CommandType.Text;
                this._command.CommandText = "DELETE FROM peronas WHERE id =" + p._id;

                this._command.ExecuteNonQuery();

                return true;


            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return false;
            }


        }





    }
}

 
 
 //######################################  XML
 
 public bool Serializar(string archivo)
        {
            try
            {
                XmlSerializer xm = new XmlSerializer(typeof(T));
                XmlTextWriter w = new XmlTextWriter(archivo, Encoding.UTF8);
                xm.Serialize(w,this.ToString());
                w.Close();
                return true;

            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return false;
            }

        }

        public bool Deserializar(string archivo)
        {
            string auxRetorno;
            try
            {
                XmlSerializer xm = new XmlSerializer(typeof(T));
                XmlTextReader w = new XmlTextReader(archivo);
                auxRetorno = (string)xm.Deserialize(w);
                w.Close();
                return true;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return false;
            }  
        }


